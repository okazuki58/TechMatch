generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  bio           String?   @db.Text
  motivation    String?   @db.Text
  githubUrl     String?
  twitterUrl    String?
  linkedinUrl   String?
  accounts      Account[]
  sessions      Session[]
  badges        Badge[]
  quizResults   QuizResult[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          String?   @default("user")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Exercise {
  id             String   @id
  title          String
  description    String
  difficulty     String
  category       String
  tags           String[]
  testDescription String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  gifUrl         String?
}

model ExerciseSubmission {
  id           String    @id @default(cuid())
  exerciseId   String
  userId       String
  repositoryUrl String
  status       String    // "pending", "completed", "failed"
  results      String?   // JSON形式のテスト結果
  // exercise     Exercise  @relation(fields: [exerciseId], references: [id])
  // user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model QuizResult {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  score       Int
  maxScore    Int
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

model Badge {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  name        String
  description String
  imageUrl    String
  achievedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz     @relation(fields: [quizId], references: [id])
}

model Quiz {
  id          String       @id
  name        String
  description String
  category    String
  difficulty  String       // "easy", "medium", "hard"
  questions   Question[]
  badge       QuizBadge?
  badges      Badge[]      // ユーザーが獲得したバッジへの参照
  quizResults QuizResult[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Question {
  id                String   @id @default(cuid())
  quizId            String
  quiz              Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question          String   @db.Text
  category          String
  options           String[] // 選択肢の配列
  correctAnswerIndex Int
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model QuizBadge {
  id          String   @id @default(cuid())
  quizId      String   @unique
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  name        String
  description String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Company {
  id          String    @id @default(cuid())
  name        String
  description String?   @db.Text
  industry    String?
  logoUrl     String?
  headerImageUrl String?
  websiteUrl  String?
  location    String?
  size        String?   // "startup", "small", "medium", "large", "enterprise"
  foundedYear Int?
  email       String?
  phone       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  jobs        Job[]
  employeeCount Int?
}

model Job {
  id              String    @id @default(cuid())
  companyId       String
  title           String
  description     String    @db.Text
  requirements    String[]
  preferredSkills String[]
  location        String
  employmentType  String    // "full-time", "part-time", "contract"
  experienceLevel String    // "entry", "mid", "senior" 
  salary          Json      // { min: number, max: number, currency: string }
  requiredQuizzes Json[]    // [{ quizId: string, minimumScore: number }]
  postedAt        DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
  imageUrl        String?
  
  // Company モデルとのリレーション
  company        Company   @relation(fields: [companyId], references: [id])
}

